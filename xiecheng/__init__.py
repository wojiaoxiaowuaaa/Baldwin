"""Python的协程能够实现单个线程内的并发，主要是因为它利用了事件循环（Event Loop）机制和异步非阻塞的执行方式。下面是其原理：

1. **事件循环**：事件循环是协程并发的基础。事件循环负责调度和执行协程，它会不断地从待执行的协程中选择一个并执行，直到所有的协程执行完毕。在 Python 中，事件循环通常由 `asyncio` 模块提供。

2. **异步非阻塞执行**：协程利用异步非阻塞的执行方式，即当一个协程遇到 IO 操作或者 `await` 关键字时，它会把控制权交给事件循环，让事件循环继续执行其他的协程，而不是等待当前协程执行完成。这样，在等待 IO 操作完成的同时，事件循环可以执行其他协程，从而实现了并发执行。

3. **事件驱动**：协程是事件驱动的，它们响应各种事件的发生并进行相应的处理。事件可以是 IO 就绪、定时器到期等。当某个事件发生时，事件循环会通知相关的协程，并执行相应的处理逻辑。

4. **内部状态保存**：协程能够在挂起和恢复时保存和恢复其内部状态，包括局部变量、执行位置等。这使得协程可以在挂起和恢复之间保持执行上下文，从而实现了多个协程在同一个线程内的切换执行。

综上所述，Python的协程能够实现单个线程内的并发，主要是因为它利用了事件循环机制和异步非阻塞的执行方式。在事件循环的调度下，多个协程可以在同一个线程内交替执行，从而实现了并发的效果"""

"""
任务task被用来“并行的”调度协程.当一个协程通过 asyncio.create_task() 等函数被封装为一个 任务，该协程会被自动调度执行.

asyncio.gather 是 Python 中 asyncio 模块提供的一个函数，用于同时运行多个协程并等待它们全部完成。它的作用是将多个协程组合在一起，以并发的方式执行它们，然后等待它们全部执行完成并返回结果。


"""