"""
Base64 编码是一种将二进制数据转换为可打印字符的编码方式。它在计算机科学和网络通信中有许多用途和好处：

1. **数据传输：** Base64 编码常用于将二进制数据在不同系统之间进行传输，特别是在网络通信中。因为某些字符在网络传输中可能会被解释为控制字符或特殊字符，使用 Base64 编码可以确保数据在不同环境中保持一致，避免数据损坏或解释错误。

2. **电子邮件附件：** 电子邮件文本仅支持 ASCII 字符，如果要将二进制文件（如图片、音频、视频等）作为邮件附件发送，可以使用 Base64 编码将其转换为可嵌入文本的形式。

3. **URL 参数：** URL 中不能直接包含一些特殊字符，例如 `/`、`?` 等。如果你需要将数据传递给 URL，可以使用 Base64 编码将其转换为安全的 URL 参数。

4. **存储敏感数据：** 尽管 Base64 编码并不加密数据，但它可以在一定程度上隐藏原始数据的内容，适用于存储一些敏感但不需要高级加密的信息，如 API 密钥或令牌。

5. **数据校验：** 通过将数据编码为 Base64，可以更轻松地执行数据校验，因为数据在不同系统中的编码始终一致，这有助于验证数据的完整性。

6. **编码可打印字符：** Base64 编码将二进制数据转换为由字母、数字和少数几个特殊字符组成的可打印字符串，这使得它适用于那些只能处理文本数据的场景。

7. **数据处理和显示：** 在某些情况下，将二进制数据转换为 Base64 编码后，可以更方便地在文本环境中处理、显示和复制粘贴数据。

然而，需要注意的是，Base64 编码并不是加密方式，它只是一种将二进制数据转换为文本的方法，因此它并不会增加数据的安全性。对于需要保护数据机密性的情况，应使用更强大的加密方法。
"""

import base64


def base64_to_json(base64_str):
    try:
        decoded_data = base64.b64decode(base64_str).decode("utf-8")
        return decoded_data
    except Exception as e:
        return str(e)


# 输入你的Base64编码字符串
input_base64 = """
"""

# 调用函数进行解码并打印结果
decoded_json = base64_to_json(input_base64)
print("解码后的 JSON 数据:", decoded_json)
